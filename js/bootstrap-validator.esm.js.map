{"version":3,"file":"bootstrap-validator.esm.js","mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACO;AACP;AACA;AACA,aAAa,uBAAuB;AACpC,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,aAAa,uBAAuB;AACpC,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,QAAQ;AACrB,aAAa,iBAAiB;AAC9B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA,uBAAuB,iDAAiD;AACxE,MAAM;AACN;AACA,yBAAyB,gDAAgD;AACzE,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,aAAa,sBAAsB;AACnC,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,WAAW,GAAG;AACd;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA,6CAA6C,oBAAoB;AACjE,KAAK;AACL;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,gBAAgB;AAC7B,aAAa,gBAAgB;AAC7B,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,eAAe;AAC5B,aAAa,eAAe;AAC5B,aAAa,gBAAgB;AAC7B,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,SAAS;AACvB;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnSA;AACA;AACA,WAAW;AACX;AACO;AACP;AACA;AACA;AACA,mBAAmB,GAAG;AACtB;AACA,uBAAuB,GAAG;AAC1B,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,kBAAkB,GAAG;AACrB,SAAS,GAAG;AACZ,WAAW,GAAG;AACd,WAAW,GAAG,GAAG,GAAG;AACpB,gBAAgB,EAAE;AAClB,gBAAgB,EAAE;AAClB,gBAAgB,EAAE;AAClB,kBAAkB,GAAG;AACrB,oBAAoB,EAAE,EAAE,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;;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;;;ACxZA;AACA;AACA;AACO;AACP;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,4BAA4B;AACzC,aAAa,OAAO;AACpB,aAAa,oBAAoB;AACjC,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB,aAAa,sBAAsB;AACnC,aAAa,eAAe;AAC5B,aAAa,eAAe;AAC5B,aAAa,oBAAoB;AACjC,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB,aAAa,OAAO;AACpB,aAAa,oBAAoB;AACjC,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,UAAU;AACvB,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,oBAAoB;AACjC,eAAe,eAAe;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;SClJA;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;;;;UCtBA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;;;;;UCAA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D;;;;;;;;;;;;;;;;;;ACNwC;AACL;AACoB;AACb;;AAE1C;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,sBAAsB;AACpC,cAAc,eAAe;AAC7B,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,eAAe;AAC7B,cAAc,eAAe;AAC7B,cAAc,SAAS;AACvB,cAAc,UAAU;AACxB;;AAEA;AACA;AACA,aAAa,UAAU;AACvB,cAAc,SAAS;AACvB;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,cAAc;AAC5B;;AAEA;AACA;AACA,aAAa,6BAA6B;AAC1C;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,iBAAiB;AAC/B;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA,aAAa,oBAAoB;AACjC,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAQ;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,6CAAO;AAC1B,uBAAuB,oDAAU;AACjC,6BAA6B,iEAAgB;;AAE7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,wBAAwB;AACrC;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,sBAAsB;AACnC,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,sBAAsB;AACnC,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,SAAS;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,SAAS;AACtB,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B;AAC9C,KAAK;AACL;AACA;;AAEA;AACA;AACA,aAAa,MAAM;AACnB,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB,gBAAgB,sBAAsB;AACtC,cAAc,uBAAuB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,iBAAiB;AAC9B,aAAa,QAAQ;AACrB,aAAa,4BAA4B;AACzC,aAAa,sBAAsB;AACnC,cAAc,oDAAoD;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,aAAa,SAAS;AACtB,eAAe,oCAAoC;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA","sources":["webpack://bootstrap-validator/./src/helpers.js","webpack://bootstrap-validator/./src/messages/ja.js","webpack://bootstrap-validator/./src/valid-exists-rules.js","webpack://bootstrap-validator/./src/valid-rules.js","webpack://bootstrap-validator/webpack/bootstrap","webpack://bootstrap-validator/webpack/runtime/define property getters","webpack://bootstrap-validator/webpack/runtime/hasOwnProperty shorthand","webpack://bootstrap-validator/webpack/runtime/make namespace object","webpack://bootstrap-validator/./src/index.js"],"sourcesContent":["/**\n * 補助処理群\n */\nexport class Helpers {\n  /**\n   * フィールドから値を取得\n   * @param {NodeList<HTMLElement>} ndValues NodeList\n   * @return {string} 値\n   */\n  static getValue (ndValues) {\n    const type = ndValues[0].attributes.type ? ndValues[0].attributes.type.value : null\n    let val\n    if (type === 'radio') {\n      ndValues.forEach(el => {\n        if (el.checked) {\n          val = el.value\n          return true\n        }\n      })\n    } else if (type !== 'checkbox') {\n      val = ndValues[0].value\n    } else {\n      val = []\n      ndValues.forEach(el => {\n        if (el.checked) {\n          val.push(el.value)\n        }\n      })\n    }\n    return val\n  }\n\n  /**\n   * 値が入力されているか？\n   * @param {NodeList<HTMLElement>} ndValues NodeList\n   * @return {boolean} true:入力, false:未入力\n   */\n  static existsValue (ndValues) {\n    if (!ndValues || ndValues.length === 0) {\n      return false\n    }\n    let ret\n    const type = ndValues[0].attributes.type ? ndValues[0].attributes.type.value : null\n    if (type === 'checkbox') {\n      ret = false\n      ndValues.forEach(el => {\n        if (el.checked) {\n          ret = true\n          return true\n        }\n      })\n    } else {\n      ret = !!this.getValue(ndValues)\n    }\n    return ret\n  }\n\n  /**\n   * エラー配列付加\n   * @param {Array<Error>} arrErrors エラー情報配列\n   * @param {Object} field    フィールド情報\n   * @param {string|string[]} errors 追加エラー情報\n   * @return {Array<Error>} エラー情報配列\n   */\n  static pushErrors (arrErrors, field, errors) {\n    const label = field.label ? field.label : field.name\n    if (typeof errors === 'string' && errors) {\n      arrErrors.push({ name: field.name, label: label, message: errors })\n    } else if (Array.isArray(errors)) {\n      errors.forEach(error => {\n        arrErrors.push({ name: field.name, label: label, message: error })\n      })\n    }\n    return arrErrors\n  }\n\n  /**\n   * エラーメッセージを返す\n   * @param {Array<string|Object>} arrErrors エラー情報配列\n   * @param {string} [delimiter] デリミタ\n   * @returns {string} エラーメッセージ\n   */\n  static join (arrErrors, delimiter) {\n    if (delimiter === undefined) delimiter = '\\n'\n    const arrErrorMessages = []\n    arrErrors.forEach((error) => {\n      if (typeof error === 'string' && error) {\n        arrErrorMessages.push(error)\n      } else {\n        // -----------------------\n        // エラー情報追加\n        // error.name フィールド名\n        // error.d_name フィールド表示名\n        // error.message エラーメッセージ\n        // -----------------------\n        arrErrorMessages.push((error.label ? error.label : error.name) + ' : ' + error.message)\n      }\n    })\n    return arrErrorMessages.join(delimiter)\n  }\n\n  /**\n   * 文字列format\n   * 文字列中の{0〜}に、2番目以降のパラメータ値を順次埋め込み\n   * @param args[0] 文字列\n   * @param args[1...] パラメータ値\n   * @return {string} 加工文字列\n   */\n  static format (...args) {\n    return args.reduce((previous, current, index) => {\n      return previous.replace(new RegExp('\\\\{' + (index - 1) + '}', 'g'), current)\n    })\n  }\n\n  /**\n   * 半角英数字チェック\n   * @param {string} _text  文字列\n   * @return {boolean} true:OK, false:NG\n   */\n  static isHankaku (_text) {\n    // 半角以外が存在する場合\n    return !(/[^\\x20-\\x7E]/).test(_text)\n  }\n\n  /**\n   * 全角チェック\n   * @param {string} _text  文字列\n   * @return {boolean} true:OK, false:NG\n   */\n  static isZenkaku (_text) {\n    return !(/[\\w\\-.]/).test(_text)\n  }\n\n  /**\n   * 電話番号チェック\n   * @param {string} _text  文字列\n   * @return {boolean} true:OK, false:NG\n   */\n  static isTel (_text) {\n    // 「0～9」「-」「(」「)」以外があったらエラー\n    return !(/[^0-9-()]/).test(_text)\n  }\n\n  /**\n   * 整数チェック\n   * @param {string} _value 値\n   * @return {boolean} true:OK, false:NG\n   */\n  static isInteger (_value) {\n    const test = /^(-\\d+|\\d*)$/.test('' + _value)\n    return test && !isNaN(_value)\n  }\n\n  /**\n   * 年月日整合性チェック\n   * @param {string|?number} [_year]  年\n   * @param {string|?number} [_month] 月\n   * @param {string|?number} [_day] 日\n   * @return {boolean} true:OK, false:NG\n   */\n  static isDate (_year, _month, _day) {\n    //= =========================\n    // 年範囲チェック\n    //= =========================\n    if (_year < 1900 || _year > 9999) {\n      return false\n    }\n    //= =========================\n    // 月範囲チェック\n    //= =========================\n    if (_month < 1 || _month > 12) {\n      return false\n    }\n    //= =========================\n    // 日範囲チェック\n    //= =========================\n    // 最小値\n    if (_day < 1) {\n      return false\n    }\n    // 最大値\n    const arrMaxMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    // 2月うるう年補正\n    if ((_year % 4 === 0 && _year % 100 !== 0) || _year % 400 === 0) {\n      arrMaxMonth[1] = 29\n    }\n    return !(arrMaxMonth[_month - 1] < _day)\n  }\n\n  /**\n   * 時分整合性チェック\n   * @param {string|number} _hour  時\n   * @param {string|number} _minute  分\n   * @param {string|?number} [_second]  秒(null=未チェック)\n   * @return {boolean} true:OK, false:NG\n   */\n  static isTime (_hour, _minute, _second) {\n    // ====================\n    // 時範囲チェック\n    // ====================\n    if (_hour < 0 || _hour >= 24) {\n      return false\n    }\n    // =====================\n    // 分範囲チェック\n    // =====================\n    if (_minute < 0 || _minute >= 60) {\n      return false\n    }\n    // =====================\n    // 秒範囲チェック\n    // =====================\n    return !(_second !== null && (_second < 0 || _second >= 60))\n  }\n\n  /**\n   * 全角カタカナチェック\n   * @param {string} _text  文字列\n   * @return {boolean} true:OK, false:NG\n   */\n  static isAllKana (_text) {\n    for (let i = 0; i < _text.length; i++) {\n      if (_text.charAt(i) < 'ァ' || _text.charAt(i) > 'ヶ') {\n        if (_text.charAt(i) !== 'ー' && _text.charAt(i) !== ' ' && _text.charAt(i) !== '　') {\n          return false\n        }\n      }\n    }\n    return true\n  }\n\n  /**\n   * 全角ひらがなチェック\n   * @param {string} _text  文字列\n   * @return {boolean} true:OK, false:NG\n   */\n  static isAllHiragana (_text) {\n    for (let i = 0; i < _text.length; i++) {\n      if (_text.charAt(i) < 'ぁ' || _text.charAt(i) > 'ん') {\n        if (_text.charAt(i) !== 'ー' && _text.charAt(i) !== ' ' && _text.charAt(i) !== '　') {\n          return false\n        }\n      }\n    }\n    return true\n  }\n\n  /**\n   * EMailチェック\n   * @param {string} _strEmail  EMAIL\n   * @return {string} '':エラー無し, ''以外:エラー\n   */\n  static isEmailEx (_strEmail) {\n    const emailPat = /^(.+)@(.+)$/\n    const specialChars = '\\\\(\\\\)<>@,;:\\\\\\\\\\\\\"\\\\.\\\\[\\\\]'\n    const validChars = '[^\\\\s' + specialChars + ']'\n    const atom = validChars + '+'\n    const domainPat = new RegExp('^' + atom + '(\\\\.' + atom + ')*$')\n\n    // 最初の「@」で分割\n    const matchArray = _strEmail.match(emailPat)\n\n    // 「@」がない\n    if (matchArray === null) {\n      return this.settings.messages.MAIL_NO_AT\n    }\n\n    // ユーザーとドメインとして格納\n    const domain = matchArray[2]\n\n    // ドメイン名パターンチェック\n    const domainArray = domain.match(domainPat)\n    if (domainArray === null) {\n      return this.settings.messages.MAIL_NO_DOMAIN\n    }\n\n    const atomPat = new RegExp(atom, 'g')\n    const domArr = domain.match(atomPat)\n    const len = domArr.length\n\n    // 最後のドメインが2文字か3文字の以外のとき、エラー\n    // ex) jp,comはOK\n    if (domArr[domArr.length - 1].length < 2 || domArr[domArr.length - 1].length > 4) {\n      return this.settings.messages.MAIL_INVALID_LOCALE\n    }\n\n    if (len < 2) {\n      return this.settings.messages.MAIL_INVALID_LOCALE\n    }\n    return ''\n  };\n}\n","/**\n * メッセージ定義\n * @type {{ZIP: string, MAIL_INVALID_DOMAIN: string, REGEXP_INVALID_PARAM: string, INTEGER_PART: string, MAX: string, DATE_PART_Y: string, INSUFFICIENT: string, DATE_PART_M: string, NUMERICAL_VALUE: string, CHECKBOX_RANGE: string, TIME_HM: string, NOT_EXISTS_FIELD: string, TIME_INVALID: string, DATE_PART_D: string, REGEXP_INVALID_VALUE: string, MIN_LENGTH: string, MAIL_INVALID_IP: string, CONFIRM: string, CHECKBOX_MIN: string, MAIL_INVALID_LOCALE: string, ZENKAKU: string, INTEGER: string, VALIDATE_ERROR: string, HIRAGANA: string, CONFIRM_FIELD: string, REQUIRED_PART: string, REQUIRED: string, ZEN_KANA: string, TIME: string, HANKAKU: string, MAX_LENGTH: string, MAIL_NO_DOMAIN: string, DATE: string, DATE_INVALID: string, MIN: string, DATETIME: string, DATE_EX: string, TEL: string, MAIL_NO_AT: string, NUM_LENGTH: string, INSUFFICIENT_PART: string, RANGE: string}}\n */\nexport const MESSAGES = {\n  VALIDATE_ERROR: '入力に誤りがあります.',\n  // Required\n  REQUIRED: '必須項目です.',\n  REQUIRED_PART: '{0} は必須項目です.',\n  INSUFFICIENT: '不足しています.',\n  INSUFFICIENT_PART: '{0} が不足しています.',\n  CONFIRM: '確認{0}と異なっています.',\n  CONFIRM_FIELD: '項目',\n  // input a numerical value\n  NUMERICAL_VALUE: '数値を入力して下さい.',\n  INTEGER: '整数値を入力して下さい.',\n  INTEGER_PART: '{0} は整数値を入力して下さい.',\n  MIN: '{0} ～ の数値を入力してください.',\n  MAX: '～ {0} の数値を入力してください.',\n  RANGE: '{0} ～ {1} の数値を入力してください.',\n  MIN_LENGTH: '{0}文字以上で入力して下さい.',\n  MAX_LENGTH: '{0}文字以下で入力して下さい.',\n  NUM_LENGTH: '{0}桁の数値を入力してください.',\n  CHECKBOX_MIN: '{0} 個チェックしてください.',\n  CHECKBOX_RANGE: '{0}～{1} 個の間でチェックしてください.',\n  ZENKAKU: '全角で入力してください.',\n  HANKAKU: '半角で入力してください.',\n  ZEN_KANA: '全角カタカナで入力してください.',\n  HIRAGANA: 'ひらがなで入力してください.',\n  TEL: '数値-()で入力してください.',\n  ZIP: '[nnn-nnnn]書式で記述してください.',\n  // 日付系\n  DATE: '[YYYY/MM/DD]書式で記述してください.',\n  DATE_EX: '[YYYY/MM/DD] or [YYYY/MM] or [YYYY]書式で記述してください.',\n  DATETIME: '[YYYY/MM/DD hh:mm:ss]書式で記述してください.',\n  TIME: '[hh:mm:ss]書式で記述してください.',\n  TIME_HM: '[hh:mm:ss]書式で記述してください.',\n  DATE_INVALID: '日付が間違っています.',\n  TIME_INVALID: '時間が間違っています.',\n  DATE_PART_Y: '(年)',\n  DATE_PART_M: '(月)',\n  DATE_PART_D: '(日)',\n  // 正規表現系\n  REGEXP_INVALID_PARAM: '正規表現が間違っています.',\n  REGEXP_INVALID_VALUE: '書式が間違っています.',\n  // メール系\n  MAIL_NO_AT: '正しくありません(@).',\n  MAIL_INVALID_IP: '正しくありません(IP).',\n  MAIL_NO_DOMAIN: 'ドメイン名がありません(DOMAIN).',\n  MAIL_INVALID_LOCALE: '正しくありません(LOCALE).',\n  MAIL_INVALID_DOMAIN: 'ドメイン名の書式が誤っています.',\n  // その他\n  NOT_EXISTS_FIELD: 'フィールド名[{0}]が存在しません.'\n}\n","/**\n * バリデーション関数群(値あり)\n */\nexport class ValidExistsRules {\n  /**\n   * 確認項目\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static confirm (field, ndValues, params, v) {\n    const ndConfirmValues = v.querySelectorByName(field.name + v.settings.confirm_suffix)\n    if (!ndValues || (!ndConfirmValues || ndConfirmValues.length === 0) ||\n      v.helpers.getValue(ndValues) !== v.helpers.getValue(ndConfirmValues)) {\n      return v.helpers.format(\n        v.settings.messages.CONFIRM,\n        (field.label ? field.label : v.settings.messages.CONFIRM_FIELD))\n    }\n    return null\n  }\n\n  /**\n   * E-Mailチェック\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static email (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    if (val) {\n      const errorEmail = v.helpers.isEmailEx.apply(v, [val])\n      if (errorEmail !== '') {\n        return errorEmail\n      }\n    }\n    return null\n  }\n\n  /**\n   * 全角\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static zenkaku (field, ndValues, params, v) {\n    if (!v.helpers.isZenkaku(v.helpers.getValue(ndValues))) {\n      return v.settings.messages.ZENKAKU\n    }\n    return null\n  }\n\n  /**\n   * 半角\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static hankaku (field, ndValues, params, v) {\n    if (!v.helpers.isHankaku(v.helpers.getValue(ndValues))) {\n      return v.settings.messages.HANKAKU\n    }\n    return null\n  }\n\n  /**\n   * 全角カタカナ\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  // eslint-disable-next-line camelcase\n  static zen_katakana (field, ndValues, params, v) {\n    if (!v.helpers.isAllKana(v.helpers.getValue(ndValues))) {\n      return v.settings.messages.ZEN_KANA\n    }\n    return null\n  }\n\n  /**\n   * 全角ひらがな\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static hiragana (field, ndValues, params, v) {\n    if (!v.helpers.isAllHiragana(v.helpers.getValue(ndValues))) {\n      return v.settings.messages.HIRAGANA\n    }\n    return null\n  }\n\n  /**\n   * 電話番号\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static tel (field, ndValues, params, v) {\n    if (!v.helpers.isTel(v.helpers.getValue(ndValues))) {\n      return v.settings.messages.TEL\n    }\n    return null\n  }\n\n  /**\n   * 数値チェック\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static numeric (field, ndValues, params, v) {\n    // type=\"text\"の時\n    const val = v.helpers.getValue(ndValues)\n    if (!isFinite(val) || val.indexOf(' ') !== -1 || val.indexOf('0x') !== -1) {\n      return v.settings.messages.NUMERICAL_VALUE\n    }\n    return null\n  }\n\n  /**\n   * 最小文字数\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 文字数\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static minlength (field, ndValues, params, v) {\n    const min = Number(params[0])\n    if (v.helpers.getValue(ndValues).length < min) { return v.helpers.format(v.settings.messages.MIN_LENGTH, min) }\n    return null\n  }\n\n  /**\n   * 最大文字数\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 文字数\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static maxlength (field, ndValues, params, v) {\n    const max = Number(params[0])\n    if (max < v.helpers.getValue(ndValues).length) { return v.helpers.format(v.settings.messages.MAX_LENGTH, max) }\n    return null\n  }\n\n  /**\n   * 数値桁数チェック\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 最小桁数\n   * @param {string|number} params.1 最大桁数\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static numlength (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    let tmpReg = params[0]\n    let tmpErrorMessage = params[0]\n    if (params[1]) {\n      tmpReg += ',' + params[1]\n      tmpErrorMessage += '～' + params[1]\n    }\n    const reg = new RegExp('^\\\\d{' + tmpReg + '}$')\n    if (!reg.test(val)) {\n      return v.helpers.format(v.settings.messages.NUM_LENGTH, tmpErrorMessage)\n    }\n    return null\n  }\n\n  /**\n   * 最小値\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 最小値\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static min (field, ndValues, params, v) {\n    /* jscpd:ignore-start */\n    const val = v.helpers.getValue(ndValues)\n    if (!v.helpers.isInteger(val)) {\n      return v.settings.messages.INTEGER\n    }\n    const min = Number(params[0])\n    /* jscpd:ignore-end */\n    if (val < min) { return v.helpers.format(v.settings.messages.MIN, min) }\n    return null\n  }\n\n  /**\n   * 最大値\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 最大値\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static max (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    if (!v.helpers.isInteger(val)) {\n      return v.settings.messages.INTEGER\n    }\n    const max = Number(params[0])\n    if (max < val) { return v.helpers.format(v.settings.messages.MIN, max) }\n    return null\n  }\n\n  /**\n   * 数値範囲\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 最小値\n   * @param {string|number} params.1 最大値\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static range (field, ndValues, params, v) {\n    /* jscpd:ignore-start */\n    const val = v.helpers.getValue(ndValues)\n    if (!v.helpers.isInteger(val)) {\n      return v.settings.messages.INTEGER\n    }\n    const min = Number(params[0])\n    /* jscpd:ignore-end */\n    const max = Number(params[1])\n    if (val < min || max < val) { return v.helpers.format(v.settings.messages.RANGE, min, max) }\n    return null\n  }\n\n  /**\n   * 日付\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static date (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    // 1980/1/2\n    //      ↓\n    // 1980/1/2,1980/1/2,1980,1,2\n    if (!val.match(/^((\\d{1,4})[/-](\\d{1,2})[/-](\\d{1,2}))$/g)) {\n      return v.settings.messages.DATE\n    }\n    // 年月日チェック\n    if (!v.helpers.isDate(RegExp.$2, RegExp.$3, RegExp.$4)) {\n      return v.settings.messages.DATE_INVALID\n    }\n    return null\n  }\n\n  /**\n   * 日時チェック\n   * [YYYY-MM-DD hh:mm:ss]または[YYYY/MM/DD]の書式でチェックする\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static datetime (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    // 1980/1/2 24:12:11\n    //      ↓\n    // 1980/1/2 23:12:11,1980/1/2,1980,1,2, 24:12:11,23:12:11,23,12,11\n    if (!val.match(/^((\\d{1,4})[/-](\\d{1,2})[/-](\\d{1,2}))( ((\\d{1,2}):(\\d{1,2})(:(\\d{1,2}))?))?$/g)) {\n      return v.settings.messages.DATETIME\n    }\n    // 年月日チェック\n    if (!v.helpers.isDate(RegExp.$2, RegExp.$3, RegExp.$4)) {\n      return v.settings.messages.DATE_INVALID\n    }\n    if (RegExp.$6 && !v.helpers.isTime(RegExp.$7, RegExp.$8, RegExp.$10)) {\n      return v.settings.messages.TIME_INVALID\n    }\n    return null\n  }\n\n  /**\n   * 日付チェック\n   * [YYYY/MM/DD] or [YYYY/MM] or [YYYY]の書式でチェックする\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  // eslint-disable-next-line camelcase\n  static date_ex (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    // 1980/1/2\n    //      ↓\n    // 1980/1/2,1980/1/2,1980,1,2\n    if (!val.match(/^(\\d{1,4})([/-](\\d{1,2})([/-](\\d{1,2}))?)?$/)) {\n      return v.settings.messages.DATE_EX\n    }\n    // 年月日チェック\n    const y = RegExp.$1\n    const m = RegExp.$3 ? RegExp.$3 : 1\n    const d = RegExp.$5 ? RegExp.$5 : 1\n    if (!v.helpers.isDate(y, m, d)) {\n      return v.settings.messages.DATE_INVALID\n    }\n    return null\n  }\n\n  /**\n   * 時間チェック\n   * [hh:mm:ss]の書式でチェックする\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string} params.0 'hm' [hh:mm]の書式でチェックする\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static time (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    if (params[0] === 'hm') {\n      if (!val.match(/^(\\d{1,2}):(\\d{1,2})$/g)) {\n        return v.settings.messages.TIME_HM\n      }\n      if (!v.helpers.isTime(RegExp.$1, RegExp.$2, 0)) {\n        return v.settings.messages.TIME_INVALID\n      }\n    } else {\n      if (!val.match(/^(\\d{1,2}):(\\d{1,2}):(\\d{1,2})$/g)) {\n        return v.settings.messages.TIME\n      }\n      if (!v.helpers.isTime(RegExp.$1, RegExp.$2, RegExp.$3)) {\n        return v.settings.messages.TIME_INVALID\n      }\n    }\n    return null\n  }\n\n  /**\n   * 郵便番号\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static zip (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    if (!val.match(/^\\d{1,3}-\\d{1,4}$/g)) {\n      return v.settings.messages.ZIP\n    }\n    return null\n  }\n\n  /**\n   * 正規表現チェック\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|RegExp} params.0 正規表現(文字列 or 正規表現クラス)\n   * @param {string} params.1 正規表現フラグ(オプション)\n   * @param {string} params.{1|2} エラーメッセージ(オプション)\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static regexp (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    let reg, errorMessage\n    if (!Array.isArray(params)) {\n      params = [params]\n    }\n    try {\n      if (typeof params[0] === 'string') {\n        reg = new RegExp(params[0], params[1] ? params[1] : undefined)\n        errorMessage = params[2]\n      } else {\n        reg = params[0]\n        errorMessage = params[1]\n      }\n      if (!reg.test(val)) { return (errorMessage || v.settings.messages.REGEXP_INVALID_VALUE) }\n    } catch (e) {\n      return v.settings.messages.REGEXP_INVALID_PARAM\n    }\n    return null\n  }\n}\n","/**\n * バリデーション関数群(値なし)\n */\nexport class ValidRules {\n  /**\n   * 数値チェック(値なし)\n   * @param {object} field フィールド\n   * @param {NodeList<HTMLInputElement>} ndValues 値NodeList\n   * @param {array} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static numeric (field, ndValues, params, v) {\n    // type=\"number\"時の仮対策\n    if (ndValues && ndValues[0].validity && ndValues[0].validity.badInput) {\n      return ndValues[0].validationMessage\n    }\n    return null\n  }\n\n  /**\n   * チェックボックス\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 最小選択数\n   * @param {string|number} params.1 最大選択数\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static checkbox (field, ndValues, params, v) {\n    const check = v.helpers.getValue(ndValues).length\n    const min = Number(params[0])\n    if (params.length >= 2) {\n      const max = Number(params[1])\n      if (check < min || max < check) {\n        return v.helpers.format(v.settings.messages.CHECKBOX_RANGE, min, max)\n      }\n    } else {\n      if (check < min) {\n        return v.helpers.format(v.settings.messages.CHECKBOX_MIN, min)\n      }\n    }\n  }\n\n  /**\n   * 郵便番号の4桁部分が入力された場合\n   * 3桁部が入力必須になるチェック\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {array} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  // eslint-disable-next-line camelcase\n  static zip_ex (field, ndValues, params, v) {\n    const zipAfter = v.querySelectorByName(field.name + v.settings.zip_suffix)\n    if (!v.helpers.existsValue(ndValues) && v.helpers.existsValue(zipAfter)) {\n      return v.settings.messages.INSUFFICIENT\n    }\n    return null\n  }\n\n  /**\n   * 年月日チェック\n   * フォーム name+\"_y\", name+\"_m\", name+\"_d\"のチェックを行う\n   * 3桁部が入力必須になるチェック\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {array} params ルールパラメータ\n   * @param {string} params.0 'required':必須チェック\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string[]|null} エラーメッセージ(正常時null)\n   */\n  static ymd (field, ndValues, params, v) {\n    // 変数宣言\n    const arrErrors = []\n\n    // 日付オブジェクト取得\n    let year = null\n    let month = null\n    let day = null\n    let isYear = false\n    let isMonth = false\n    let isDay = false\n    const objY = v.querySelectorByName(field.name + v.settings.ymd_suffix_y)\n    const objM = v.querySelectorByName(field.name + v.settings.ymd_suffix_m)\n    const objD = v.querySelectorByName(field.name + v.settings.ymd_suffix_d)\n    if (v.helpers.existsValue(objY)) {\n      isYear = true\n      year = v.helpers.getValue(objY)\n    }\n    if (v.helpers.existsValue(objM)) {\n      isMonth = true\n      month = v.helpers.getValue(objM)\n    }\n    if (v.helpers.existsValue(objD)) {\n      isDay = true\n      day = v.helpers.getValue(objD)\n    }\n\n    // 日付必須チェック\n    if (params[0] === 'required') {\n      if (!isYear) {\n        arrErrors.push(v.helpers.format(v.settings.messages.REQUIRED_PART, v.settings.messages.DATE_PART_Y))\n      }\n      if (!isMonth) {\n        arrErrors.push(v.helpers.format(v.settings.messages.REQUIRED_PART, v.settings.messages.DATE_PART_M))\n      }\n      if (!isDay) {\n        arrErrors.push(v.helpers.format(v.settings.messages.REQUIRED_PART, v.settings.messages.DATE_PART_D))\n      }\n    } else {\n      // 日付の年月日が一部のみ入力されているとき\n      if ((isYear || isMonth || isDay) && !(isYear && isMonth && isDay)) {\n        if (!isYear) {\n          arrErrors.push(v.helpers.format(v.settings.messages.INSUFFICIENT_PART, v.settings.messages.DATE_PART_Y))\n        }\n        if (!isMonth) {\n          arrErrors.push(v.helpers.format(v.settings.messages.INSUFFICIENT_PART, v.settings.messages.DATE_PART_M))\n        }\n        if (!isDay) {\n          arrErrors.push(v.helpers.format(v.settings.messages.INSUFFICIENT_PART, v.settings.messages.DATE_PART_D))\n        }\n      }\n    }\n    // 年数値チェック\n    if (isYear && !v.helpers.isInteger(year)) {\n      arrErrors.push(v.helpers.format(v.settings.messages.INTEGER_PART, v.settings.messages.DATE_PART_Y))\n    }\n    // 月数値チェック\n    if (isMonth && !v.helpers.isInteger(month)) {\n      arrErrors.push(v.helpers.format(v.settings.messages.INTEGER_PART, v.settings.messages.DATE_PART_M))\n    }\n    // 日数値チェック\n    if (isDay && !v.helpers.isInteger(day)) {\n      arrErrors.push(v.helpers.format(v.settings.messages.INTEGER_PART, v.settings.messages.DATE_PART_D))\n    }\n\n    // 年月日チェック\n    if (arrErrors.length === 0 && !v.helpers.isDate(year, month, day)) {\n      arrErrors.push(v.helpers.format(v.settings.messages.DATE_INVALID))\n    }\n\n    return arrErrors\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { MESSAGES } from './messages/ja'\nimport { Helpers } from './helpers'\nimport { ValidExistsRules } from './valid-exists-rules'\nimport { ValidRules } from './valid-rules'\n\n/**\n * 設定パラメータ\n * @typedef {Object} Settings\n * @property {null|string|function} submit Submit時に行う処理\n * @property {null|function} result バリデーション後に行う処理\n * @property {string} confirm_suffix confirmルールの確認フィールドの接尾語\n * @property {string} zip_suffix zip_exルールの4桁フィールドの接尾語\n * @property {string} ymd_suffix_y ymdルールの年フィールドの接尾語\n * @property {string} ymd_suffix_m ymdルールの月フィールドの接尾語\n * @property {string} ymd_suffix_d ymdルールの日フィールドの接尾語\n * @property {null|function} setError エラー設定関数を指定\n * @property {null|function} clearError エラークリア関数を指定\n * @property {boolean} focusError true=エラー時に最初のエラーにフォーカスする\n * @property {MESSAGES} messages メッセージ情報配列\n */\n\n/**\n * オプションパラメータ\n * @typedef {Settings} Options\n * @property {Field[]} [fields] フィールド配列\n */\n\n/**\n * field\n * @typedef {Object} Field\n * @property {string} name 項目名\n * @property {string} label 項目ラベル名\n * @property {Rule| Rule[]} rules バリデーションルール\n */\n\n/**\n * ルール\n * @typedef {Object|Array<string>|string} Rule\n */\n\n/**\n * errorパラメータ\n * @typedef {Object} Error\n * @property {string} name 項目名\n * @property {string} label 項目ラベル名\n * @property {string|string[]} message エラーメッセージ\n */\n\n/**\n * Bootstrapレイアウトバリデーション\n */\nexport class BootstrapValidator {\n  /**\n   * コンストラクタ\n   * @param {HTMLElement|string} form フォームNode\n   * @param {Options} [options] 設定オプション\n   */\n  constructor (form, options) {\n    /** フォームElement */\n    this.form = form\n\n    /**\n     * 初期設定情報\n     * @type {Settings}\n     * @private\n     */\n    this._settings = {\n      submit: 'validate',\n      result: null,\n      confirm_suffix: '_confirm',\n      zip_suffix: '_after',\n      ymd_suffix_y: '_y',\n      ymd_suffix_m: '_m',\n      ymd_suffix_d: '_d',\n      setError: null,\n      clearError: null,\n      focusError: false,\n      /** メッセージ */\n      messages: MESSAGES\n    }\n\n    /** option */\n    if (options) {\n      /** フィールド情報 */\n      if (options.fields) {\n        /** @type Array<Field> */\n        this.fields = options.fields\n      }\n      /** 設定マージ */\n      for (const paramName in this._settings) {\n        if (options[paramName]) {\n          if (typeof options[paramName] === 'object') {\n            this._settings[paramName] = Object.assign(this._settings[paramName], options[paramName])\n          } else {\n            this._settings[paramName] = options[paramName]\n          }\n        }\n      }\n    }\n\n    this.helpers = Helpers\n    this._validRules = ValidRules\n    this._validExistsRules = ValidExistsRules\n\n    // submitイベント登録\n    this.listenerSubmit = event => this.onSubmit(event)\n    this.form.addEventListener('submit', this.listenerSubmit)\n  }\n\n  /**\n   * 破棄処理\n   * submitイベントを削除する\n   */\n  destroy () {\n    // submitイベント削除\n    this.form.removeEventListener('submit', this.listenerSubmit)\n    this.settings.submit = null\n  }\n\n  /**\n   * submit時の処理\n   * @param {Event} event\n   */\n  onSubmit (event) {\n    let ret = false\n    if (this.settings.submit) {\n      if (typeof this.settings.submit === 'string') {\n        if (['validate', 'validateAlert', 'asyncValidate', 'asyncValidateAlert'].indexOf(this.settings.submit) !== -1) {\n          ret = this[this.settings.submit]()\n        } else {\n          console.error('Not exists method [' + this.settings.submit + ']')\n        }\n      } else if (typeof this.settings.submit === 'function') {\n        ret = this.settings.submit()\n      }\n      if (!ret) {\n        // event.stopPropagation()\n        event.preventDefault()\n      }\n    }\n  }\n\n  /**\n   * form取得\n   * @return {HTMLFormElement} 設定データ\n   */\n  get form () {\n    return this._form\n  }\n\n  /**\n   * form設定\n   * @param {string|HTMLFormElement} selectors 設定データ\n   */\n  set form (selectors) {\n    if (typeof selectors === 'string') {\n      this._form = document.querySelector(selectors)\n    } else {\n      this._form = selectors\n    }\n  }\n\n  /**\n   * 設定データ取得\n   * @return {Settings} 設定データ\n   */\n  get settings () {\n    return this._settings\n  }\n\n  /**\n   * 設定データ更新\n   * 既存の設定とマージする\n   * @param {Settings} settings 設定データ\n   */\n  set settings (settings) {\n    this._settings = Object.assign(this._settings, settings)\n  }\n\n  /**\n   * selector名からNodeListを取得\n   * @param {string} name selector名\n   * @return {NodeList}\n   */\n  querySelectorByName (name) {\n    const el = this.form.querySelectorAll('*[name=\"' + name + '\"]')\n    if (!el) {\n      console.error('Not found element ' + name + '.')\n    }\n    return el\n  }\n\n  /**\n   * エラー表示処理\n   * @param {Object[]} arrErrors エラー一覧\n   * @param {string} arrErrors[].name フィールド名\n   * @param {string} arrErrors[].messages エラーメッセージ\n   */\n  displayError (arrErrors) {\n    arrErrors.forEach(error => {\n      this.setError(error.name, error.message)\n    })\n    if (arrErrors.length > 0) {\n      // 最初のエラーにフォーカス\n      this.focusError(arrErrors[0].name)\n    }\n  }\n\n  /**\n   * 指定のエラーにフォーカス\n   * @param {string} name\n   */\n  focusError (name) {\n    const fields = this.querySelectorByName(name)\n    if (fields && fields.length > 0) {\n      fields[0].focus()\n    } else {\n      console.warn(this.helpers.format(this.settings.messages.NOT_EXISTS_FIELD, name))\n    }\n  }\n\n  /**\n   * エラークリア処理\n   * (Bootstrap5レイアウト)\n   * @param {string} [name] 項目名\n   */\n  clearError (name) {\n    if (typeof this.settings.clearError === 'function') {\n      this.settings.clearError(name)\n    } else {\n      this.clearErrorBootstrap(name)\n    }\n  }\n\n  /**\n   * 指定箇所エラー表示処理\n   * @param {string} name 項目名\n   * @param {string} message エラー文言\n   */\n  setError (name, message) {\n    if (typeof this.settings.setError === 'function') {\n      this.settings.setError.apply(this, [name, message])\n    } else {\n      this.setErrorBootstrap(name, message)\n    }\n  }\n\n  /**\n   * エラークリア処理\n   * (Bootstrap5/4レイアウト)\n   * @param {string} [name] 項目名\n   */\n  clearErrorBootstrap (name) {\n    if (name) {\n      const ndValues = this.querySelectorByName(name)\n      const inputField = ndValues[0]\n      const type = inputField.attributes.type ? inputField.attributes.type.value : null\n      if (['radio', 'checkbox'].indexOf(type) !== -1) {\n        const nodeBlock = inputField.parentNode.parentNode\n        nodeBlock.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'))\n        nodeBlock.querySelectorAll('.invalid-feedback').forEach(el => el.remove())\n      } else {\n        this.form.querySelectorAll(\"*[name='\" + name + \"'].is-invalid\").forEach(el => el.classList.remove('is-invalid'))\n        this.form.querySelectorAll(\"*[name='\" + name + \"'] ~ .invalid-feedback\").forEach(el => el.remove())\n      }\n    } else {\n      this.form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'))\n      this.form.querySelectorAll('.invalid-feedback').forEach(el => el.remove())\n    }\n  }\n\n  /**\n   * 指定箇所エラー表示処理\n   * (Bootstrap5/4レイアウト)\n   * @param {string} name 項目名\n   * @param {string} message エラー文言\n   */\n  setErrorBootstrap (name, message) {\n    const errDiv = document.createElement('div')\n    errDiv.innerHTML = '<div class=\"invalid-feedback\">' + message + '</div>'\n    const ndValues = this.querySelectorByName(name)\n    const field = ndValues[0]\n    const type = field.attributes.type ? field.attributes.type.value : null\n    if (['radio', 'checkbox'].indexOf(type) !== -1) {\n      ndValues.forEach(ndValue => ndValue.classList.add('is-invalid'))\n      // field.parentNode.parentNode.insertBefore(errDiv.firstElementChild, field.nextElementSibling);\n      const nodeBlock = field.parentNode\n      nodeBlock.classList.add('is-invalid')\n      nodeBlock.parentNode.insertBefore(errDiv.firstElementChild, null)\n    } else {\n      field.classList.add('is-invalid')\n      // field.parentNode.insertBefore(errDiv.firstElementChild, field.nextElementSibling);\n      field.parentNode.insertBefore(errDiv.firstElementChild, null)\n    }\n  }\n\n  /**\n   * バリデーション共通処理\n   * @param {Array<string|Object>} errors エラー情報配列\n   * @return {boolean} true:エラー\n   * @private\n   */\n  _validateCommon (errors) {\n    let result = true\n    if (errors.length > 0) {\n      this.displayError(errors)\n      result = false\n    }\n    if (typeof this.settings.result === 'function') {\n      result = this.settings.result(result, errors)\n    }\n    return result\n  }\n\n  /**\n   * バリデーション処理\n   * @param {Options} [options] オプションフィールド情報\n   * @return {boolean} true:正常\n   */\n  validate (options) {\n    this.clearError()\n    return this._validateCommon(this.getValidateResult(options))\n  }\n\n  /**\n   * バリデーション処理(async版)\n   * @param {Options} [options] オプションフィールド情報\n   * @returns {Promise<boolean>} true:正常\n   */\n  async asyncValidate (options) {\n    this.clearError()\n    return this.asyncGetValidateResult(options).then(errors =>\n      this._validateCommon(errors)\n    )\n  }\n\n  /**\n   * バリデーション共通処理(エラー時アラート)\n   * @param {Array<string|Object>} errors エラー情報配列\n   * @return {boolean} true:エラー\n   * @private\n   */\n  _validateAlertCommon (errors) {\n    let result = true\n    if (errors.length > 0) {\n      window.alert(this.settings.messages.VALIDATE_ERROR + '\\n' + this.helpers.join(errors))\n      if (this.settings.focusError) {\n        // 最初のエラーにフォーカス\n        this.settings.focusError.apply(errors[0].name)\n      } else {\n        this.focusError(errors[0].name)\n      }\n      result = false\n    }\n    if (typeof this.settings.result === 'function') {\n      result = this.settings.result(result, errors)\n    }\n    return result\n  }\n\n  /**\n   * パラメータチェック\n   * (エラー時アラート)\n   * @param {Options} [options] オプション\n   * @returns {boolean} true:正常\n   */\n  validateAlert (options) {\n    return this._validateAlertCommon(this.getValidateResult(options))\n  }\n\n  /**\n   * パラメータチェック(async版)\n   * (エラー時アラート)\n   * @param {Options} [options] オプション\n   * @returns {Promise<boolean>} true:正常\n   */\n  async asyncValidateAlert (options) {\n    return await this.asyncGetValidateResult(options).then(errors => {\n      return this._validateAlertCommon(errors)\n    })\n  }\n\n  /**\n   * フィールド/ルール情報取得\n   * @returns {Object[]}\n   */\n  getFieldsRules () {\n    const fields = []\n    Array.from(this.form).forEach((element) => {\n      const name = element.name\n      if (!name) {\n        return\n      }\n      const type = element.getAttribute('type')\n      if (type === 'radio' || type === 'checkbox') {\n        if (fields.find(item => item.name === element.name)) {\n          return\n        }\n      }\n      const rules = []\n      if (element.required) {\n        rules.push('required')\n      }\n      // 属性によるパターン\n      [['minLength', 'minlength'], ['maxLength', 'maxlength'], 'min', 'max', ['pattern', 'regexp']].forEach(function (attr) {\n        let rule\n        if (Array.isArray(attr)) {\n          rule = attr[1]\n          attr = attr[0]\n        } else {\n          rule = attr\n        }\n        const value = element.getAttribute(attr)\n        if (value !== null) {\n          rules.push([rule, value])\n        }\n      })\n      // type=\"xxx\"によるバリデート判別\n      let rule\n      switch (type) {\n        case 'date':\n        case 'email':\n        case 'tel':\n          rule = type\n          break\n        case 'number':\n          rule = 'numeric'\n          break\n        case 'time':\n          rule = ['time', 'hm']\n          break\n      }\n      if (rule) {\n        rules.push(rule)\n      }\n      fields.push({ name: name, rules: rules })\n    })\n    return fields\n  }\n\n  /**\n   * ルールをルールとパラメータに分解\n   * @param {Rule} rule ルール\n   * @typedef {Array} _parseRule~RuleParams\n   * @property {string} rule ルール\n   * @property {Array<string|number>} params パラメータ\n   * @return {_parseRule~RuleParams} ルール,パラメータ\n   */\n  _parseRule (rule) {\n    /** @type Array<string|number> */\n    let params\n    // ------------------\n    // ルール分岐\n    // ------------------\n    // ルールが配列\n    // [ 'ルール名', [<パラメータ配列>]]\n    // [ 'ルール名', <パラメータ1>, <パラメータ2>..., <パラメータn> ]\n    if (Array.isArray(rule)) {\n      if (rule.length === 0) {\n        return null\n      } else if (rule.length === 2) {\n        params = rule[1]\n        if (!Array.isArray(params)) {\n          params = [params]\n        }\n      } else if (rule.length >= 3) {\n        params = rule.slice(1)\n      }\n      rule = rule[0]\n    } else if (typeof rule === 'object') {\n      // ルールがObject\n      // { rule:'ルール名', params:[<パラメータ配列>]}\n      if (!rule.rule) {\n        return null\n      }\n      if (rule.params) {\n        params = rule.params\n        if (!Array.isArray(params)) {\n          params = [params]\n        }\n      }\n      rule = rule.rule\n    } else if (typeof rule === 'string') {\n      // ルールが文字列(旧仕様)\n      // パラメータ解析処理\n      params = rule.split(':', 2)\n      if (params[0]) {\n        rule = params[0]\n      }\n      if (params[1]) {\n        try {\n          params = JSON.parse(params[1])\n        } catch (e) {\n          params = params[1].split(',')\n        }\n        if (!Array.isArray(params)) {\n          params = [params]\n        }\n      } else {\n        params = []\n      }\n    }\n    return [rule, params]\n  }\n\n  /**\n   * 指定ルールでバリデート\n   * @param {function|string} rule バリデーションルール\n   * @param {object} field フィールド\n   * @param {NodeList<HTMLInputElement>} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @return {null|string|string[]|Promise<null|string|string[]>} エラー情報\n   * @private\n   */\n  _validateRule (rule, field, ndValues, params) {\n    let errors\n    if (typeof rule === 'function') {\n      // 独自チェック関数\n      errors = rule.apply(this, [field, ndValues, params, this])\n    } else if (!this.helpers.existsValue(ndValues)) {\n      if (rule === 'required') {\n        if (!this.helpers.existsValue(ndValues)) {\n          errors = this.settings.messages.REQUIRED\n        }\n      } else if (typeof this._validRules[rule] === 'function') {\n        errors = this._validRules[rule].apply(this, [field, ndValues, params, this])\n      }\n    } else if (typeof this._validExistsRules[rule] === 'function') {\n      errors = this._validExistsRules[rule].apply(this, [field, ndValues, params, this])\n    } else if (rule === 'checkbox') {\n      errors = this._validRules[rule].apply(this, [field, ndValues, params, this])\n    }\n    return errors\n  }\n\n  /**\n   * バリデーション結果取得\n   * @param {Options} [options] オプションフィールド情報\n   * @returns {boolean|string[]} エラー値\n   */\n  getValidateResult (options) {\n    const fields = (options && options.fields) ? options.fields : (this.fields || this.getFieldsRules())\n    const arrRuleErrors = []\n    fields.forEach(field => {\n      /* jscpd:ignore-start */\n      const ndValues = this.querySelectorByName(field.name)\n      if (!field.rules) {\n        return\n      }\n      let rules = field.rules\n      if (!Array.isArray(rules)) {\n        rules = [rules]\n      }\n      rules.forEach(rule => {\n        let params\n        [rule, params] = this._parseRule(rule)\n\n        const errors = this._validateRule(rule, field, ndValues, params)\n        this.helpers.pushErrors(arrRuleErrors, field, errors)\n      })\n      /* jscpd:ignore-end */\n    })\n    return arrRuleErrors\n  }\n\n  /**\n   * バリデーション結果取得(async版)\n   * @param {Options} [options] オプションフィールド情報\n   * @returns {Promise<boolean>|Promise<string[]>} エラー値\n   */\n  async asyncGetValidateResult (options) {\n    const fields = (options && options.fields) ? options.fields : (this.fields || this.getFieldsRules())\n    const promises = []\n    const errorFields = []\n    for (const field of fields) {\n      const ndValues = this.querySelectorByName(field.name)\n      if (!field.rules) {\n        break\n      }\n      let rules = field.rules\n      if (!Array.isArray(rules)) {\n        rules = [rules]\n      }\n\n      rules.forEach(rule => {\n        let params\n        [rule, params] = this._parseRule(rule)\n\n        const errors = this._validateRule(rule, field, ndValues, params)\n        if (errors !== undefined && errors !== null) {\n          promises.push(typeof errors.then === 'function'\n            ? errors\n            : Promise.resolve(errors)\n          )\n          errorFields.push(field)\n        }\n      })\n    }\n\n    return await Promise.all(promises).then(errorsList => {\n      const arrRuleErrors = []\n      for (const i in errorsList) {\n        this.helpers.pushErrors(arrRuleErrors, errorFields[i], errorsList[i])\n      }\n      return arrRuleErrors\n    })\n  }\n}\n"],"names":[],"sourceRoot":""}