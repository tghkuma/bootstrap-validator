{"version":3,"file":"bootstrap-validator.min.js","mappings":"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","sources":["webpack://bootstrap-validator/webpack/universalModuleDefinition","webpack://bootstrap-validator/webpack/bootstrap","webpack://bootstrap-validator/webpack/runtime/define property getters","webpack://bootstrap-validator/webpack/runtime/hasOwnProperty shorthand","webpack://bootstrap-validator/webpack/runtime/make namespace object","webpack://bootstrap-validator/./src/messages/ja.js","webpack://bootstrap-validator/./src/helpers.js","webpack://bootstrap-validator/./src/valid-exists-rules.js","webpack://bootstrap-validator/./src/valid-rules.js","webpack://bootstrap-validator/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * メッセージ定義\n * @type {{ZIP: string, MAIL_INVALID_DOMAIN: string, REGEXP_INVALID_PARAM: string, INTEGER_PART: string, MAX: string, DATE_PART_Y: string, INSUFFICIENT: string, DATE_PART_M: string, NUMERICAL_VALUE: string, CHECKBOX_RANGE: string, TIME_HM: string, NOT_EXISTS_FIELD: string, TIME_INVALID: string, DATE_PART_D: string, REGEXP_INVALID_VALUE: string, MIN_LENGTH: string, MAIL_INVALID_IP: string, CONFIRM: string, CHECKBOX_MIN: string, MAIL_INVALID_LOCALE: string, ZENKAKU: string, INTEGER: string, VALIDATE_ERROR: string, HIRAGANA: string, CONFIRM_FIELD: string, REQUIRED_PART: string, REQUIRED: string, ZEN_KANA: string, TIME: string, HANKAKU: string, MAX_LENGTH: string, MAIL_NO_DOMAIN: string, DATE: string, DATE_INVALID: string, MIN: string, DATETIME: string, DATE_EX: string, TEL: string, MAIL_NO_AT: string, NUM_LENGTH: string, INSUFFICIENT_PART: string, RANGE: string}}\n */\nexport const MESSAGES = {\n  VALIDATE_ERROR: '入力に誤りがあります.',\n  // Required\n  REQUIRED: '必須項目です.',\n  REQUIRED_PART: '{0} は必須項目です.',\n  INSUFFICIENT: '不足しています.',\n  INSUFFICIENT_PART: '{0} が不足しています.',\n  CONFIRM: '確認{0}と異なっています.',\n  CONFIRM_FIELD: '項目',\n  // input a numerical value\n  NUMERICAL_VALUE: '数値を入力して下さい.',\n  INTEGER: '整数値を入力して下さい.',\n  INTEGER_PART: '{0} は整数値を入力して下さい.',\n  MIN: '{0} ～ の数値を入力してください.',\n  MAX: '～ {0} の数値を入力してください.',\n  RANGE: '{0} ～ {1} の数値を入力してください.',\n  MIN_LENGTH: '{0}文字以上で入力して下さい.',\n  MAX_LENGTH: '{0}文字以下で入力して下さい.',\n  NUM_LENGTH: '{0}桁の数値を入力してください.',\n  CHECKBOX_MIN: '{0} 個チェックしてください.',\n  CHECKBOX_RANGE: '{0}～{1} 個の間でチェックしてください.',\n  ZENKAKU: '全角で入力してください.',\n  HANKAKU: '半角で入力してください.',\n  ZEN_KANA: '全角カタカナで入力してください.',\n  HIRAGANA: 'ひらがなで入力してください.',\n  TEL: '数値-()で入力してください.',\n  ZIP: '[nnn-nnnn]書式で記述してください.',\n  // 日付系\n  DATE: '[YYYY/MM/DD]書式で記述してください.',\n  DATE_EX: '[YYYY/MM/DD] or [YYYY/MM] or [YYYY]書式で記述してください.',\n  DATETIME: '[YYYY/MM/DD hh:mm:ss]書式で記述してください.',\n  TIME: '[hh:mm:ss]書式で記述してください.',\n  TIME_HM: '[hh:mm:ss]書式で記述してください.',\n  DATE_INVALID: '日付が間違っています.',\n  TIME_INVALID: '時間が間違っています.',\n  DATE_PART_Y: '(年)',\n  DATE_PART_M: '(月)',\n  DATE_PART_D: '(日)',\n  // 正規表現系\n  REGEXP_INVALID_PARAM: '正規表現が間違っています.',\n  REGEXP_INVALID_VALUE: '書式が間違っています.',\n  // メール系\n  MAIL_NO_AT: '正しくありません(@).',\n  MAIL_INVALID_IP: '正しくありません(IP).',\n  MAIL_NO_DOMAIN: 'ドメイン名がありません(DOMAIN).',\n  MAIL_INVALID_LOCALE: '正しくありません(LOCALE).',\n  MAIL_INVALID_DOMAIN: 'ドメイン名の書式が誤っています.',\n  // その他\n  NOT_EXISTS_FIELD: 'フィールド名[{0}]が存在しません.'\n}\n","/**\n * 補助処理群\n */\nexport class Helpers {\n  /**\n   * フィールドから値を取得\n   * @param {NodeList<HTMLElement>} ndValues NodeList\n   * @return {string} 値\n   */\n  static getValue (ndValues) {\n    const type = ndValues[0].attributes.type ? ndValues[0].attributes.type.value : null\n    let val\n    if (type === 'radio') {\n      ndValues.forEach(el => {\n        if (el.checked) {\n          val = el.value\n          return true\n        }\n      })\n    } else if (type !== 'checkbox') {\n      val = ndValues[0].value\n    } else {\n      val = []\n      ndValues.forEach(el => {\n        if (el.checked) {\n          val.push(el.value)\n        }\n      })\n    }\n    return val\n  }\n\n  /**\n   * 値が入力されているか？\n   * @param {NodeList<HTMLElement>} ndValues NodeList\n   * @return {boolean} true:入力, false:未入力\n   */\n  static existsValue (ndValues) {\n    if (!ndValues || ndValues.length === 0) {\n      return false\n    }\n    let ret\n    const type = ndValues[0].attributes.type ? ndValues[0].attributes.type.value : null\n    if (type === 'checkbox') {\n      ret = false\n      ndValues.forEach(el => {\n        if (el.checked) {\n          ret = true\n          return true\n        }\n      })\n    } else {\n      ret = !!this.getValue(ndValues)\n    }\n    return ret\n  }\n\n  /**\n   * エラー配列付加\n   * @param {Array<Error>} arrErrors エラー情報配列\n   * @param {Object} field    フィールド情報\n   * @param {string|string[]} errors 追加エラー情報\n   * @return {Array<Error>} エラー情報配列\n   */\n  static pushErrors (arrErrors, field, errors) {\n    const label = field.label ? field.label : field.name\n    if (typeof errors === 'string' && errors) {\n      arrErrors.push({ name: field.name, label: label, message: errors })\n    } else if (Array.isArray(errors)) {\n      errors.forEach(error => {\n        arrErrors.push({ name: field.name, label: label, message: error })\n      })\n    }\n    return arrErrors\n  }\n\n  /**\n   * エラーメッセージを返す\n   * @param {Array<string|Object>} arrErrors エラー情報配列\n   * @param {string} [delimiter] デリミタ\n   * @returns {string} エラーメッセージ\n   */\n  static join (arrErrors, delimiter) {\n    if (delimiter === undefined) delimiter = '\\n'\n    const arrErrorMessages = []\n    arrErrors.forEach((error) => {\n      if (typeof error === 'string' && error) {\n        arrErrorMessages.push(error)\n      } else {\n        // -----------------------\n        // エラー情報追加\n        // error.name フィールド名\n        // error.d_name フィールド表示名\n        // error.message エラーメッセージ\n        // -----------------------\n        arrErrorMessages.push((error.label ? error.label : error.name) + ' : ' + error.message)\n      }\n    })\n    return arrErrorMessages.join(delimiter)\n  }\n\n  /**\n   * 文字列format\n   * 文字列中の{0〜}に、2番目以降のパラメータ値を順次埋め込み\n   * @param args[0] 文字列\n   * @param args[1...] パラメータ値\n   * @return {string} 加工文字列\n   */\n  static format (...args) {\n    return args.reduce((previous, current, index) => {\n      return previous.replace(new RegExp('\\\\{' + (index - 1) + '}', 'g'), current)\n    })\n  }\n\n  /**\n   * 半角英数字チェック\n   * @param {string} _text  文字列\n   * @return {boolean} true:OK, false:NG\n   */\n  static isHankaku (_text) {\n    // 半角以外が存在する場合\n    return !(/[^\\x20-\\x7E]/).test(_text)\n  }\n\n  /**\n   * 全角チェック\n   * @param {string} _text  文字列\n   * @return {boolean} true:OK, false:NG\n   */\n  static isZenkaku (_text) {\n    return !(/[\\w\\-.]/).test(_text)\n  }\n\n  /**\n   * 電話番号チェック\n   * @param {string} _text  文字列\n   * @return {boolean} true:OK, false:NG\n   */\n  static isTel (_text) {\n    // 「0～9」「-」「(」「)」以外があったらエラー\n    return !(/[^0-9-()]/).test(_text)\n  }\n\n  /**\n   * 整数チェック\n   * @param {string} _value 値\n   * @return {boolean} true:OK, false:NG\n   */\n  static isInteger (_value) {\n    const test = /^(-\\d+|\\d*)$/.test('' + _value)\n    return test && !isNaN(_value)\n  }\n\n  /**\n   * 年月日整合性チェック\n   * @param {string|?number} [_year]  年\n   * @param {string|?number} [_month] 月\n   * @param {string|?number} [_day] 日\n   * @return {boolean} true:OK, false:NG\n   */\n  static isDate (_year, _month, _day) {\n    //= =========================\n    // 年範囲チェック\n    //= =========================\n    if (_year < 1900 || _year > 9999) {\n      return false\n    }\n    //= =========================\n    // 月範囲チェック\n    //= =========================\n    if (_month < 1 || _month > 12) {\n      return false\n    }\n    //= =========================\n    // 日範囲チェック\n    //= =========================\n    // 最小値\n    if (_day < 1) {\n      return false\n    }\n    // 最大値\n    const arrMaxMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    // 2月うるう年補正\n    if ((_year % 4 === 0 && _year % 100 !== 0) || _year % 400 === 0) {\n      arrMaxMonth[1] = 29\n    }\n    return !(arrMaxMonth[_month - 1] < _day)\n  }\n\n  /**\n   * 時分整合性チェック\n   * @param {string|number} _hour  時\n   * @param {string|number} _minute  分\n   * @param {string|?number} [_second]  秒(null=未チェック)\n   * @return {boolean} true:OK, false:NG\n   */\n  static isTime (_hour, _minute, _second) {\n    // ====================\n    // 時範囲チェック\n    // ====================\n    if (_hour < 0 || _hour >= 24) {\n      return false\n    }\n    // =====================\n    // 分範囲チェック\n    // =====================\n    if (_minute < 0 || _minute >= 60) {\n      return false\n    }\n    // =====================\n    // 秒範囲チェック\n    // =====================\n    return !(_second !== null && (_second < 0 || _second >= 60))\n  }\n\n  /**\n   * 全角カタカナチェック\n   * @param {string} _text  文字列\n   * @return {boolean} true:OK, false:NG\n   */\n  static isAllKana (_text) {\n    for (let i = 0; i < _text.length; i++) {\n      if (_text.charAt(i) < 'ァ' || _text.charAt(i) > 'ヶ') {\n        if (_text.charAt(i) !== 'ー' && _text.charAt(i) !== ' ' && _text.charAt(i) !== '　') {\n          return false\n        }\n      }\n    }\n    return true\n  }\n\n  /**\n   * 全角ひらがなチェック\n   * @param {string} _text  文字列\n   * @return {boolean} true:OK, false:NG\n   */\n  static isAllHiragana (_text) {\n    for (let i = 0; i < _text.length; i++) {\n      if (_text.charAt(i) < 'ぁ' || _text.charAt(i) > 'ん') {\n        if (_text.charAt(i) !== 'ー' && _text.charAt(i) !== ' ' && _text.charAt(i) !== '　') {\n          return false\n        }\n      }\n    }\n    return true\n  }\n\n  /**\n   * EMailチェック\n   * @param {string} _strEmail  EMAIL\n   * @return {string} '':エラー無し, ''以外:エラー\n   */\n  static isEmailEx (_strEmail) {\n    const emailPat = /^(.+)@(.+)$/\n    const specialChars = '\\\\(\\\\)<>@,;:\\\\\\\\\\\\\"\\\\.\\\\[\\\\]'\n    const validChars = '[^\\\\s' + specialChars + ']'\n    const atom = validChars + '+'\n    const domainPat = new RegExp('^' + atom + '(\\\\.' + atom + ')*$')\n\n    // 最初の「@」で分割\n    const matchArray = _strEmail.match(emailPat)\n\n    // 「@」がない\n    if (matchArray === null) {\n      return this.settings.messages.MAIL_NO_AT\n    }\n\n    // ユーザーとドメインとして格納\n    const domain = matchArray[2]\n\n    // ドメイン名パターンチェック\n    const domainArray = domain.match(domainPat)\n    if (domainArray === null) {\n      return this.settings.messages.MAIL_NO_DOMAIN\n    }\n\n    const atomPat = new RegExp(atom, 'g')\n    const domArr = domain.match(atomPat)\n    const len = domArr.length\n\n    // 最後のドメインが2文字か3文字の以外のとき、エラー\n    // ex) jp,comはOK\n    if (domArr[domArr.length - 1].length < 2 || domArr[domArr.length - 1].length > 4) {\n      return this.settings.messages.MAIL_INVALID_LOCALE\n    }\n\n    if (len < 2) {\n      return this.settings.messages.MAIL_INVALID_LOCALE\n    }\n    return ''\n  };\n}\n","/**\n * バリデーション関数群(値あり)\n */\nexport class ValidExistsRules {\n  /**\n   * 確認項目\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static confirm (field, ndValues, params, v) {\n    const ndConfirmValues = v.querySelectorByName(field.name + v.settings.confirm_suffix)\n    if (!ndValues || (!ndConfirmValues || ndConfirmValues.length === 0) ||\n      v.helpers.getValue(ndValues) !== v.helpers.getValue(ndConfirmValues)) {\n      return v.helpers.format(\n        v.settings.messages.CONFIRM,\n        (field.label ? field.label : v.settings.messages.CONFIRM_FIELD))\n    }\n    return null\n  }\n\n  /**\n   * E-Mailチェック\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static email (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    if (val) {\n      const errorEmail = v.helpers.isEmailEx.apply(v, [val])\n      if (errorEmail !== '') {\n        return errorEmail\n      }\n    }\n    return null\n  }\n\n  /**\n   * 全角\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static zenkaku (field, ndValues, params, v) {\n    if (!v.helpers.isZenkaku(v.helpers.getValue(ndValues))) {\n      return v.settings.messages.ZENKAKU\n    }\n    return null\n  }\n\n  /**\n   * 半角\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static hankaku (field, ndValues, params, v) {\n    if (!v.helpers.isHankaku(v.helpers.getValue(ndValues))) {\n      return v.settings.messages.HANKAKU\n    }\n    return null\n  }\n\n  /**\n   * 全角カタカナ\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  // eslint-disable-next-line camelcase\n  static zen_katakana (field, ndValues, params, v) {\n    if (!v.helpers.isAllKana(v.helpers.getValue(ndValues))) {\n      return v.settings.messages.ZEN_KANA\n    }\n    return null\n  }\n\n  /**\n   * 全角ひらがな\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static hiragana (field, ndValues, params, v) {\n    if (!v.helpers.isAllHiragana(v.helpers.getValue(ndValues))) {\n      return v.settings.messages.HIRAGANA\n    }\n    return null\n  }\n\n  /**\n   * 電話番号\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static tel (field, ndValues, params, v) {\n    if (!v.helpers.isTel(v.helpers.getValue(ndValues))) {\n      return v.settings.messages.TEL\n    }\n    return null\n  }\n\n  /**\n   * 数値チェック\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static numeric (field, ndValues, params, v) {\n    // type=\"text\"の時\n    const val = v.helpers.getValue(ndValues)\n    if (!isFinite(val) || val.indexOf(' ') !== -1 || val.indexOf('0x') !== -1) {\n      return v.settings.messages.NUMERICAL_VALUE\n    }\n    return null\n  }\n\n  /**\n   * 最小文字数\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 文字数\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static minlength (field, ndValues, params, v) {\n    const min = Number(params[0])\n    if (v.helpers.getValue(ndValues).length < min) { return v.helpers.format(v.settings.messages.MIN_LENGTH, min) }\n    return null\n  }\n\n  /**\n   * 最大文字数\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 文字数\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static maxlength (field, ndValues, params, v) {\n    const max = Number(params[0])\n    if (max < v.helpers.getValue(ndValues).length) { return v.helpers.format(v.settings.messages.MAX_LENGTH, max) }\n    return null\n  }\n\n  /**\n   * 数値桁数チェック\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 最小桁数\n   * @param {string|number} params.1 最大桁数\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static numlength (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    let tmpReg = params[0]\n    let tmpErrorMessage = params[0]\n    if (params[1]) {\n      tmpReg += ',' + params[1]\n      tmpErrorMessage += '～' + params[1]\n    }\n    const reg = new RegExp('^\\\\d{' + tmpReg + '}$')\n    if (!reg.test(val)) {\n      return v.helpers.format(v.settings.messages.NUM_LENGTH, tmpErrorMessage)\n    }\n    return null\n  }\n\n  /**\n   * 最小値\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 最小値\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static min (field, ndValues, params, v) {\n    /* jscpd:ignore-start */\n    const val = v.helpers.getValue(ndValues)\n    if (!v.helpers.isInteger(val)) {\n      return v.settings.messages.INTEGER\n    }\n    const min = Number(params[0])\n    /* jscpd:ignore-end */\n    if (val < min) { return v.helpers.format(v.settings.messages.MIN, min) }\n    return null\n  }\n\n  /**\n   * 最大値\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 最大値\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static max (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    if (!v.helpers.isInteger(val)) {\n      return v.settings.messages.INTEGER\n    }\n    const max = Number(params[0])\n    if (max < val) { return v.helpers.format(v.settings.messages.MIN, max) }\n    return null\n  }\n\n  /**\n   * 数値範囲\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 最小値\n   * @param {string|number} params.1 最大値\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static range (field, ndValues, params, v) {\n    /* jscpd:ignore-start */\n    const val = v.helpers.getValue(ndValues)\n    if (!v.helpers.isInteger(val)) {\n      return v.settings.messages.INTEGER\n    }\n    const min = Number(params[0])\n    /* jscpd:ignore-end */\n    const max = Number(params[1])\n    if (val < min || max < val) { return v.helpers.format(v.settings.messages.RANGE, min, max) }\n    return null\n  }\n\n  /**\n   * 日付\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static date (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    // 1980/1/2\n    //      ↓\n    // 1980/1/2,1980/1/2,1980,1,2\n    if (!val.match(/^((\\d{1,4})[/-](\\d{1,2})[/-](\\d{1,2}))$/g)) {\n      return v.settings.messages.DATE\n    }\n    // 年月日チェック\n    if (!v.helpers.isDate(RegExp.$2, RegExp.$3, RegExp.$4)) {\n      return v.settings.messages.DATE_INVALID\n    }\n    return null\n  }\n\n  /**\n   * 日時チェック\n   * [YYYY-MM-DD hh:mm:ss]または[YYYY/MM/DD]の書式でチェックする\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static datetime (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    // 1980/1/2 24:12:11\n    //      ↓\n    // 1980/1/2 23:12:11,1980/1/2,1980,1,2, 24:12:11,23:12:11,23,12,11\n    if (!val.match(/^((\\d{1,4})[/-](\\d{1,2})[/-](\\d{1,2}))( ((\\d{1,2}):(\\d{1,2})(:(\\d{1,2}))?))?$/g)) {\n      return v.settings.messages.DATETIME\n    }\n    // 年月日チェック\n    if (!v.helpers.isDate(RegExp.$2, RegExp.$3, RegExp.$4)) {\n      return v.settings.messages.DATE_INVALID\n    }\n    if (RegExp.$6 && !v.helpers.isTime(RegExp.$7, RegExp.$8, RegExp.$10)) {\n      return v.settings.messages.TIME_INVALID\n    }\n    return null\n  }\n\n  /**\n   * 日付チェック\n   * [YYYY/MM/DD] or [YYYY/MM] or [YYYY]の書式でチェックする\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  // eslint-disable-next-line camelcase\n  static date_ex (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    // 1980/1/2\n    //      ↓\n    // 1980/1/2,1980/1/2,1980,1,2\n    if (!val.match(/^(\\d{1,4})([/-](\\d{1,2})([/-](\\d{1,2}))?)?$/)) {\n      return v.settings.messages.DATE_EX\n    }\n    // 年月日チェック\n    const y = RegExp.$1\n    const m = RegExp.$3 ? RegExp.$3 : 1\n    const d = RegExp.$5 ? RegExp.$5 : 1\n    if (!v.helpers.isDate(y, m, d)) {\n      return v.settings.messages.DATE_INVALID\n    }\n    return null\n  }\n\n  /**\n   * 時間チェック\n   * [hh:mm:ss]の書式でチェックする\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string} params.0 'hm' [hh:mm]の書式でチェックする\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static time (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    if (params[0] === 'hm') {\n      if (!val.match(/^(\\d{1,2}):(\\d{1,2})$/g)) {\n        return v.settings.messages.TIME_HM\n      }\n      if (!v.helpers.isTime(RegExp.$1, RegExp.$2, 0)) {\n        return v.settings.messages.TIME_INVALID\n      }\n    } else {\n      if (!val.match(/^(\\d{1,2}):(\\d{1,2}):(\\d{1,2})$/g)) {\n        return v.settings.messages.TIME\n      }\n      if (!v.helpers.isTime(RegExp.$1, RegExp.$2, RegExp.$3)) {\n        return v.settings.messages.TIME_INVALID\n      }\n    }\n    return null\n  }\n\n  /**\n   * 郵便番号\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static zip (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    if (!val.match(/^\\d{1,3}-\\d{1,4}$/g)) {\n      return v.settings.messages.ZIP\n    }\n    return null\n  }\n\n  /**\n   * 正規表現チェック\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|RegExp} params.0 正規表現(文字列 or 正規表現クラス)\n   * @param {string} params.1 正規表現フラグ(オプション)\n   * @param {string} params.{1|2} エラーメッセージ(オプション)\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static regexp (field, ndValues, params, v) {\n    const val = v.helpers.getValue(ndValues)\n    let reg, errorMessage\n    if (!Array.isArray(params)) {\n      params = [params]\n    }\n    try {\n      if (typeof params[0] === 'string') {\n        reg = new RegExp(params[0], params[1] ? params[1] : undefined)\n        errorMessage = params[2]\n      } else {\n        reg = params[0]\n        errorMessage = params[1]\n      }\n      if (!reg.test(val)) { return (errorMessage || v.settings.messages.REGEXP_INVALID_VALUE) }\n    } catch (e) {\n      return v.settings.messages.REGEXP_INVALID_PARAM\n    }\n    return null\n  }\n}\n","/**\n * バリデーション関数群(値なし)\n */\nexport class ValidRules {\n  /**\n   * 数値チェック(値なし)\n   * @param {object} field フィールド\n   * @param {NodeList<HTMLInputElement>} ndValues 値NodeList\n   * @param {array} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static numeric (field, ndValues, params, v) {\n    // type=\"number\"時の仮対策\n    if (ndValues && ndValues[0].validity && ndValues[0].validity.badInput) {\n      return ndValues[0].validationMessage\n    }\n    return null\n  }\n\n  /**\n   * チェックボックス\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {Array<string|number>} params ルールパラメータ\n   * @param {string|number} params.0 最小選択数\n   * @param {string|number} params.1 最大選択数\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  static checkbox (field, ndValues, params, v) {\n    const check = v.helpers.getValue(ndValues).length\n    const min = Number(params[0])\n    if (params.length >= 2) {\n      const max = Number(params[1])\n      if (check < min || max < check) {\n        return v.helpers.format(v.settings.messages.CHECKBOX_RANGE, min, max)\n      }\n    } else {\n      if (check < min) {\n        return v.helpers.format(v.settings.messages.CHECKBOX_MIN, min)\n      }\n    }\n  }\n\n  /**\n   * 郵便番号の4桁部分が入力された場合\n   * 3桁部が入力必須になるチェック\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {array} [params] ルールパラメータ\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string|null} エラーメッセージ(正常時null)\n   */\n  // eslint-disable-next-line camelcase\n  static zip_ex (field, ndValues, params, v) {\n    const zipAfter = v.querySelectorByName(field.name + v.settings.zip_suffix)\n    if (!v.helpers.existsValue(ndValues) && v.helpers.existsValue(zipAfter)) {\n      return v.settings.messages.INSUFFICIENT\n    }\n    return null\n  }\n\n  /**\n   * 年月日チェック\n   * フォーム name+\"_y\", name+\"_m\", name+\"_d\"のチェックを行う\n   * 3桁部が入力必須になるチェック\n   * @param {object} field フィールド\n   * @param {NodeList} ndValues 値NodeList\n   * @param {array} params ルールパラメータ\n   * @param {string} params.0 'required':必須チェック\n   * @param {BootstrapValidator} [v] validatorインスタンス\n   * @returns {string[]|null} エラーメッセージ(正常時null)\n   */\n  static ymd (field, ndValues, params, v) {\n    // 変数宣言\n    const arrErrors = []\n\n    // 日付オブジェクト取得\n    let year = null\n    let month = null\n    let day = null\n    let isYear = false\n    let isMonth = false\n    let isDay = false\n    const objY = v.querySelectorByName(field.name + v.settings.ymd_suffix_y)\n    const objM = v.querySelectorByName(field.name + v.settings.ymd_suffix_m)\n    const objD = v.querySelectorByName(field.name + v.settings.ymd_suffix_d)\n    if (v.helpers.existsValue(objY)) {\n      isYear = true\n      year = v.helpers.getValue(objY)\n    }\n    if (v.helpers.existsValue(objM)) {\n      isMonth = true\n      month = v.helpers.getValue(objM)\n    }\n    if (v.helpers.existsValue(objD)) {\n      isDay = true\n      day = v.helpers.getValue(objD)\n    }\n\n    // 日付必須チェック\n    if (params[0] === 'required') {\n      if (!isYear) {\n        arrErrors.push(v.helpers.format(v.settings.messages.REQUIRED_PART, v.settings.messages.DATE_PART_Y))\n      }\n      if (!isMonth) {\n        arrErrors.push(v.helpers.format(v.settings.messages.REQUIRED_PART, v.settings.messages.DATE_PART_M))\n      }\n      if (!isDay) {\n        arrErrors.push(v.helpers.format(v.settings.messages.REQUIRED_PART, v.settings.messages.DATE_PART_D))\n      }\n    } else {\n      // 日付の年月日が一部のみ入力されているとき\n      if ((isYear || isMonth || isDay) && !(isYear && isMonth && isDay)) {\n        if (!isYear) {\n          arrErrors.push(v.helpers.format(v.settings.messages.INSUFFICIENT_PART, v.settings.messages.DATE_PART_Y))\n        }\n        if (!isMonth) {\n          arrErrors.push(v.helpers.format(v.settings.messages.INSUFFICIENT_PART, v.settings.messages.DATE_PART_M))\n        }\n        if (!isDay) {\n          arrErrors.push(v.helpers.format(v.settings.messages.INSUFFICIENT_PART, v.settings.messages.DATE_PART_D))\n        }\n      }\n    }\n    // 年数値チェック\n    if (isYear && !v.helpers.isInteger(year)) {\n      arrErrors.push(v.helpers.format(v.settings.messages.INTEGER_PART, v.settings.messages.DATE_PART_Y))\n    }\n    // 月数値チェック\n    if (isMonth && !v.helpers.isInteger(month)) {\n      arrErrors.push(v.helpers.format(v.settings.messages.INTEGER_PART, v.settings.messages.DATE_PART_M))\n    }\n    // 日数値チェック\n    if (isDay && !v.helpers.isInteger(day)) {\n      arrErrors.push(v.helpers.format(v.settings.messages.INTEGER_PART, v.settings.messages.DATE_PART_D))\n    }\n\n    // 年月日チェック\n    if (arrErrors.length === 0 && !v.helpers.isDate(year, month, day)) {\n      arrErrors.push(v.helpers.format(v.settings.messages.DATE_INVALID))\n    }\n\n    return arrErrors\n  }\n}\n","import { MESSAGES } from './messages/ja'\nimport { Helpers } from './helpers'\nimport { ValidExistsRules } from './valid-exists-rules'\nimport { ValidRules } from './valid-rules'\n\n/**\n * 設定パラメータ\n * @typedef {Object} Settings\n * @property {null|string|function} submit Submit時に行う処理\n * @property {null|function} result バリデーション後に行う処理\n * @property {string} confirm_suffix confirmルールの確認フィールドの接尾語\n * @property {string} zip_suffix zip_exルールの4桁フィールドの接尾語\n * @property {string} ymd_suffix_y ymdルールの年フィールドの接尾語\n * @property {string} ymd_suffix_m ymdルールの月フィールドの接尾語\n * @property {string} ymd_suffix_d ymdルールの日フィールドの接尾語\n * @property {null|function} setError エラー設定関数を指定\n * @property {null|function} clearError エラークリア関数を指定\n * @property {boolean} focusError true=エラー時に最初のエラーにフォーカスする\n * @property {MESSAGES} messages メッセージ情報配列\n */\n\n/**\n * オプションパラメータ\n * @typedef {Settings} Options\n * @property {Field[]} [fields] フィールド配列\n */\n\n/**\n * field\n * @typedef {Object} Field\n * @property {string} name 項目名\n * @property {string} label 項目ラベル名\n * @property {Rule| Rule[]} rules バリデーションルール\n */\n\n/**\n * ルール\n * @typedef {Object|Array<string>|string} Rule\n */\n\n/**\n * errorパラメータ\n * @typedef {Object} Error\n * @property {string} name 項目名\n * @property {string} label 項目ラベル名\n * @property {string|string[]} message エラーメッセージ\n */\n\n/**\n * Bootstrapレイアウトバリデーション\n */\nexport class BootstrapValidator {\n  /**\n   * コンストラクタ\n   * @param {HTMLElement|string} form フォームNode\n   * @param {Options} [options] 設定オプション\n   */\n  constructor (form, options) {\n    /** フォームElement */\n    this.form = form\n\n    /**\n     * 初期設定情報\n     * @type {Settings}\n     * @private\n     */\n    this._settings = {\n      submit: 'validate',\n      result: null,\n      confirm_suffix: '_confirm',\n      zip_suffix: '_after',\n      ymd_suffix_y: '_y',\n      ymd_suffix_m: '_m',\n      ymd_suffix_d: '_d',\n      setError: null,\n      clearError: null,\n      focusError: false,\n      /** メッセージ */\n      messages: MESSAGES\n    }\n\n    /** option */\n    if (options) {\n      /** フィールド情報 */\n      if (options.fields) {\n        /** @type Array<Field> */\n        this.fields = options.fields\n      }\n      /** 設定マージ */\n      for (const paramName in this._settings) {\n        if (options[paramName]) {\n          if (typeof options[paramName] === 'object') {\n            this._settings[paramName] = Object.assign(this._settings[paramName], options[paramName])\n          } else {\n            this._settings[paramName] = options[paramName]\n          }\n        }\n      }\n    }\n\n    this.helpers = Helpers\n    this._validRules = ValidRules\n    this._validExistsRules = ValidExistsRules\n\n    // submitイベント登録\n    this.listenerSubmit = event => this.onSubmit(event)\n    this.form.addEventListener('submit', this.listenerSubmit)\n  }\n\n  /**\n   * 破棄処理\n   * submitイベントを削除する\n   */\n  destroy () {\n    // submitイベント削除\n    this.form.removeEventListener('submit', this.listenerSubmit)\n    this.settings.submit = null\n  }\n\n  /**\n   * submit時の処理\n   * @param {Event} event\n   */\n  onSubmit (event) {\n    let ret = false\n    if (this.settings.submit) {\n      if (typeof this.settings.submit === 'string') {\n        if (['validate', 'validateAlert', 'asyncValidate', 'asyncValidateAlert'].indexOf(this.settings.submit) !== -1) {\n          ret = this[this.settings.submit]()\n        } else {\n          console.error('Not exists method [' + this.settings.submit + ']')\n        }\n      } else if (typeof this.settings.submit === 'function') {\n        ret = this.settings.submit()\n      }\n      if (!ret) {\n        // event.stopPropagation()\n        event.preventDefault()\n      }\n    }\n  }\n\n  /**\n   * form取得\n   * @return {HTMLFormElement} 設定データ\n   */\n  get form () {\n    return this._form\n  }\n\n  /**\n   * form設定\n   * @param {string|HTMLFormElement} selectors 設定データ\n   */\n  set form (selectors) {\n    if (typeof selectors === 'string') {\n      this._form = document.querySelector(selectors)\n    } else {\n      this._form = selectors\n    }\n  }\n\n  /**\n   * 設定データ取得\n   * @return {Settings} 設定データ\n   */\n  get settings () {\n    return this._settings\n  }\n\n  /**\n   * 設定データ更新\n   * 既存の設定とマージする\n   * @param {Settings} settings 設定データ\n   */\n  set settings (settings) {\n    this._settings = Object.assign(this._settings, settings)\n  }\n\n  /**\n   * selector名からNodeListを取得\n   * @param {string} name selector名\n   * @return {NodeList}\n   */\n  querySelectorByName (name) {\n    const el = this.form.querySelectorAll('*[name=\"' + name + '\"]')\n    if (!el) {\n      console.error('Not found element ' + name + '.')\n    }\n    return el\n  }\n\n  /**\n   * エラー表示処理\n   * @param {Object[]} arrErrors エラー一覧\n   * @param {string} arrErrors[].name フィールド名\n   * @param {string} arrErrors[].messages エラーメッセージ\n   */\n  displayError (arrErrors) {\n    arrErrors.forEach(error => {\n      this.setError(error.name, error.message)\n    })\n    if (arrErrors.length > 0) {\n      // 最初のエラーにフォーカス\n      this.focusError(arrErrors[0].name)\n    }\n  }\n\n  /**\n   * 指定のエラーにフォーカス\n   * @param {string} name\n   */\n  focusError (name) {\n    const fields = this.querySelectorByName(name)\n    if (fields && fields.length > 0) {\n      fields[0].focus()\n    } else {\n      console.warn(this.helpers.format(this.settings.messages.NOT_EXISTS_FIELD, name))\n    }\n  }\n\n  /**\n   * エラークリア処理\n   * (Bootstrap5レイアウト)\n   * @param {string} [name] 項目名\n   */\n  clearError (name) {\n    if (typeof this.settings.clearError === 'function') {\n      this.settings.clearError(name)\n    } else {\n      this.clearErrorBootstrap(name)\n    }\n  }\n\n  /**\n   * 指定箇所エラー表示処理\n   * @param {string} name 項目名\n   * @param {string} message エラー文言\n   */\n  setError (name, message) {\n    if (typeof this.settings.setError === 'function') {\n      this.settings.setError.apply(this, [name, message])\n    } else {\n      this.setErrorBootstrap(name, message)\n    }\n  }\n\n  /**\n   * エラークリア処理\n   * (Bootstrap5/4レイアウト)\n   * @param {string} [name] 項目名\n   */\n  clearErrorBootstrap (name) {\n    if (name) {\n      const ndValues = this.querySelectorByName(name)\n      const inputField = ndValues[0]\n      const type = inputField.attributes.type ? inputField.attributes.type.value : null\n      if (['radio', 'checkbox'].indexOf(type) !== -1) {\n        const nodeBlock = inputField.parentNode.parentNode\n        nodeBlock.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'))\n        nodeBlock.querySelectorAll('.invalid-feedback').forEach(el => el.remove())\n      } else {\n        this.form.querySelectorAll(\"*[name='\" + name + \"'].is-invalid\").forEach(el => el.classList.remove('is-invalid'))\n        this.form.querySelectorAll(\"*[name='\" + name + \"'] ~ .invalid-feedback\").forEach(el => el.remove())\n      }\n    } else {\n      this.form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'))\n      this.form.querySelectorAll('.invalid-feedback').forEach(el => el.remove())\n    }\n  }\n\n  /**\n   * 指定箇所エラー表示処理\n   * (Bootstrap5/4レイアウト)\n   * @param {string} name 項目名\n   * @param {string} message エラー文言\n   */\n  setErrorBootstrap (name, message) {\n    const errDiv = document.createElement('div')\n    errDiv.innerHTML = '<div class=\"invalid-feedback\">' + message + '</div>'\n    const ndValues = this.querySelectorByName(name)\n    const field = ndValues[0]\n    const type = field.attributes.type ? field.attributes.type.value : null\n    if (['radio', 'checkbox'].indexOf(type) !== -1) {\n      ndValues.forEach(ndValue => ndValue.classList.add('is-invalid'))\n      // field.parentNode.parentNode.insertBefore(errDiv.firstElementChild, field.nextElementSibling);\n      const nodeBlock = field.parentNode\n      nodeBlock.classList.add('is-invalid')\n      nodeBlock.parentNode.insertBefore(errDiv.firstElementChild, null)\n    } else {\n      field.classList.add('is-invalid')\n      // field.parentNode.insertBefore(errDiv.firstElementChild, field.nextElementSibling);\n      field.parentNode.insertBefore(errDiv.firstElementChild, null)\n    }\n  }\n\n  /**\n   * バリデーション共通処理\n   * @param {Array<string|Object>} errors エラー情報配列\n   * @return {boolean} true:エラー\n   * @private\n   */\n  _validateCommon (errors) {\n    let result = true\n    if (errors.length > 0) {\n      this.displayError(errors)\n      result = false\n    }\n    if (typeof this.settings.result === 'function') {\n      result = this.settings.result(result, errors)\n    }\n    return result\n  }\n\n  /**\n   * バリデーション処理\n   * @param {Options} [options] オプションフィールド情報\n   * @return {boolean} true:正常\n   */\n  validate (options) {\n    this.clearError()\n    return this._validateCommon(this.getValidateResult(options))\n  }\n\n  /**\n   * バリデーション処理(async版)\n   * @param {Options} [options] オプションフィールド情報\n   * @returns {Promise<boolean>} true:正常\n   */\n  async asyncValidate (options) {\n    this.clearError()\n    return this.asyncGetValidateResult(options).then(errors =>\n      this._validateCommon(errors)\n    )\n  }\n\n  /**\n   * バリデーション共通処理(エラー時アラート)\n   * @param {Array<string|Object>} errors エラー情報配列\n   * @return {boolean} true:エラー\n   * @private\n   */\n  _validateAlertCommon (errors) {\n    let result = true\n    if (errors.length > 0) {\n      window.alert(this.settings.messages.VALIDATE_ERROR + '\\n' + this.helpers.join(errors))\n      if (this.settings.focusError) {\n        // 最初のエラーにフォーカス\n        this.settings.focusError.apply(errors[0].name)\n      } else {\n        this.focusError(errors[0].name)\n      }\n      result = false\n    }\n    if (typeof this.settings.result === 'function') {\n      result = this.settings.result(result, errors)\n    }\n    return result\n  }\n\n  /**\n   * パラメータチェック\n   * (エラー時アラート)\n   * @param {Options} [options] オプション\n   * @returns {boolean} true:正常\n   */\n  validateAlert (options) {\n    return this._validateAlertCommon(this.getValidateResult(options))\n  }\n\n  /**\n   * パラメータチェック(async版)\n   * (エラー時アラート)\n   * @param {Options} [options] オプション\n   * @returns {Promise<boolean>} true:正常\n   */\n  async asyncValidateAlert (options) {\n    return await this.asyncGetValidateResult(options).then(errors => {\n      return this._validateAlertCommon(errors)\n    })\n  }\n\n  /**\n   * フィールド/ルール情報取得\n   * @returns {Object[]}\n   */\n  getFieldsRules () {\n    const fields = []\n    Array.from(this.form).forEach((element) => {\n      const name = element.name\n      if (!name) {\n        return\n      }\n      const type = element.getAttribute('type')\n      if (type === 'radio' || type === 'checkbox') {\n        if (fields.find(item => item.name === element.name)) {\n          return\n        }\n      }\n      const rules = []\n      if (element.required) {\n        rules.push('required')\n      }\n      // 属性によるパターン\n      [['minLength', 'minlength'], ['maxLength', 'maxlength'], 'min', 'max', ['pattern', 'regexp']].forEach(function (attr) {\n        let rule\n        if (Array.isArray(attr)) {\n          rule = attr[1]\n          attr = attr[0]\n        } else {\n          rule = attr\n        }\n        const value = element.getAttribute(attr)\n        if (value !== null) {\n          rules.push([rule, value])\n        }\n      })\n      // type=\"xxx\"によるバリデート判別\n      let rule\n      switch (type) {\n        case 'date':\n        case 'email':\n        case 'tel':\n          rule = type\n          break\n        case 'number':\n          rule = 'numeric'\n          break\n        case 'time':\n          rule = ['time', 'hm']\n          break\n      }\n      if (rule) {\n        rules.push(rule)\n      }\n      fields.push({ name: name, rules: rules })\n    })\n    return fields\n  }\n\n  /**\n   * ルールをルールとパラメータに分解\n   * @param {Rule} rule ルール\n   * @typedef {Array} _parseRule~RuleParams\n   * @property {string} rule ルール\n   * @property {Array<string|number>} params パラメータ\n   * @return {_parseRule~RuleParams} ルール,パラメータ\n   */\n  _parseRule (rule) {\n    /** @type Array<string|number> */\n    let params\n    // ------------------\n    // ルール分岐\n    // ------------------\n    // ルールが配列\n    // [ 'ルール名', [<パラメータ配列>]]\n    // [ 'ルール名', <パラメータ1>, <パラメータ2>..., <パラメータn> ]\n    if (Array.isArray(rule)) {\n      if (rule.length === 0) {\n        return null\n      } else if (rule.length === 2) {\n        params = rule[1]\n        if (!Array.isArray(params)) {\n          params = [params]\n        }\n      } else if (rule.length >= 3) {\n        params = rule.slice(1)\n      }\n      rule = rule[0]\n    } else if (typeof rule === 'object') {\n      // ルールがObject\n      // { rule:'ルール名', params:[<パラメータ配列>]}\n      if (!rule.rule) {\n        return null\n      }\n      if (rule.params) {\n        params = rule.params\n        if (!Array.isArray(params)) {\n          params = [params]\n        }\n      }\n      rule = rule.rule\n    } else if (typeof rule === 'string') {\n      // ルールが文字列(旧仕様)\n      // パラメータ解析処理\n      params = rule.split(':', 2)\n      if (params[0]) {\n        rule = params[0]\n      }\n      if (params[1]) {\n        try {\n          params = JSON.parse(params[1])\n        } catch (e) {\n          params = params[1].split(',')\n        }\n        if (!Array.isArray(params)) {\n          params = [params]\n        }\n      } else {\n        params = []\n      }\n    }\n    return [rule, params]\n  }\n\n  /**\n   * 指定ルールでバリデート\n   * @param {function|string} rule バリデーションルール\n   * @param {object} field フィールド\n   * @param {NodeList<HTMLInputElement>} ndValues 値NodeList\n   * @param {Array<string|number>} [params] ルールパラメータ\n   * @return {null|string|string[]|Promise<null|string|string[]>} エラー情報\n   * @private\n   */\n  _validateRule (rule, field, ndValues, params) {\n    let errors\n    if (typeof rule === 'function') {\n      // 独自チェック関数\n      errors = rule.apply(this, [field, ndValues, params, this])\n    } else if (!this.helpers.existsValue(ndValues)) {\n      if (rule === 'required') {\n        if (!this.helpers.existsValue(ndValues)) {\n          errors = this.settings.messages.REQUIRED\n        }\n      } else if (typeof this._validRules[rule] === 'function') {\n        errors = this._validRules[rule].apply(this, [field, ndValues, params, this])\n      }\n    } else if (typeof this._validExistsRules[rule] === 'function') {\n      errors = this._validExistsRules[rule].apply(this, [field, ndValues, params, this])\n    } else if (rule === 'checkbox') {\n      errors = this._validRules[rule].apply(this, [field, ndValues, params, this])\n    }\n    return errors\n  }\n\n  /**\n   * バリデーション結果取得\n   * @param {Options} [options] オプションフィールド情報\n   * @returns {boolean|string[]} エラー値\n   */\n  getValidateResult (options) {\n    const fields = (options && options.fields) ? options.fields : (this.fields || this.getFieldsRules())\n    const arrRuleErrors = []\n    fields.forEach(field => {\n      /* jscpd:ignore-start */\n      const ndValues = this.querySelectorByName(field.name)\n      if (!field.rules) {\n        return\n      }\n      let rules = field.rules\n      if (!Array.isArray(rules)) {\n        rules = [rules]\n      }\n      rules.forEach(rule => {\n        let params\n        [rule, params] = this._parseRule(rule)\n\n        const errors = this._validateRule(rule, field, ndValues, params)\n        this.helpers.pushErrors(arrRuleErrors, field, errors)\n      })\n      /* jscpd:ignore-end */\n    })\n    return arrRuleErrors\n  }\n\n  /**\n   * バリデーション結果取得(async版)\n   * @param {Options} [options] オプションフィールド情報\n   * @returns {Promise<boolean>|Promise<string[]>} エラー値\n   */\n  async asyncGetValidateResult (options) {\n    const fields = (options && options.fields) ? options.fields : (this.fields || this.getFieldsRules())\n    const promises = []\n    const errorFields = []\n    for (const field of fields) {\n      const ndValues = this.querySelectorByName(field.name)\n      if (!field.rules) {\n        break\n      }\n      let rules = field.rules\n      if (!Array.isArray(rules)) {\n        rules = [rules]\n      }\n\n      rules.forEach(rule => {\n        let params\n        [rule, params] = this._parseRule(rule)\n\n        const errors = this._validateRule(rule, field, ndValues, params)\n        if (errors !== undefined && errors !== null) {\n          promises.push(typeof errors.then === 'function'\n            ? errors\n            : Promise.resolve(errors)\n          )\n          errorFields.push(field)\n        }\n      })\n    }\n\n    return await Promise.all(promises).then(errorsList => {\n      const arrRuleErrors = []\n      for (const i in errorsList) {\n        this.helpers.pushErrors(arrRuleErrors, errorFields[i], errorsList[i])\n      }\n      return arrRuleErrors\n    })\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","a","i","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","MESSAGES","VALIDATE_ERROR","REQUIRED","REQUIRED_PART","INSUFFICIENT","INSUFFICIENT_PART","CONFIRM","CONFIRM_FIELD","NUMERICAL_VALUE","INTEGER","INTEGER_PART","MIN","MAX","RANGE","MIN_LENGTH","MAX_LENGTH","NUM_LENGTH","CHECKBOX_MIN","CHECKBOX_RANGE","ZENKAKU","HANKAKU","ZEN_KANA","HIRAGANA","TEL","ZIP","DATE","DATE_EX","DATETIME","TIME","TIME_HM","DATE_INVALID","TIME_INVALID","DATE_PART_Y","DATE_PART_M","DATE_PART_D","REGEXP_INVALID_PARAM","REGEXP_INVALID_VALUE","MAIL_NO_AT","MAIL_INVALID_IP","MAIL_NO_DOMAIN","MAIL_INVALID_LOCALE","MAIL_INVALID_DOMAIN","NOT_EXISTS_FIELD","Helpers","static","ndValues","type","attributes","val","forEach","el","checked","push","length","ret","this","getValue","arrErrors","field","errors","label","name","message","Array","isArray","error","delimiter","undefined","arrErrorMessages","join","args","reduce","previous","current","index","replace","RegExp","_text","test","_value","isNaN","_year","_month","_day","arrMaxMonth","_hour","_minute","_second","charAt","_strEmail","atom","validChars","domainPat","matchArray","match","settings","messages","domain","atomPat","domArr","len","ValidExistsRules","params","v","ndConfirmValues","querySelectorByName","confirm_suffix","helpers","format","errorEmail","isEmailEx","apply","isZenkaku","isHankaku","isAllKana","isAllHiragana","isTel","isFinite","indexOf","min","Number","max","tmpReg","tmpErrorMessage","isInteger","isDate","$2","$3","$4","$6","isTime","$7","$8","$10","y","$1","m","d","$5","reg","errorMessage","e","ValidRules","validity","badInput","validationMessage","check","zipAfter","zip_suffix","existsValue","year","month","day","isYear","isMonth","isDay","objY","ymd_suffix_y","objM","ymd_suffix_m","objD","ymd_suffix_d","BootstrapValidator","constructor","form","options","_settings","submit","result","setError","clearError","focusError","fields","paramName","assign","_validRules","_validExistsRules","listenerSubmit","event","onSubmit","addEventListener","destroy","removeEventListener","console","preventDefault","_form","selectors","document","querySelector","querySelectorAll","displayError","focus","warn","clearErrorBootstrap","setErrorBootstrap","inputField","nodeBlock","parentNode","classList","remove","errDiv","createElement","innerHTML","ndValue","add","insertBefore","firstElementChild","_validateCommon","validate","getValidateResult","async","asyncGetValidateResult","then","_validateAlertCommon","window","alert","validateAlert","getFieldsRules","from","element","getAttribute","find","item","rules","rule","required","attr","_parseRule","slice","split","JSON","parse","_validateRule","arrRuleErrors","pushErrors","promises","errorFields","Promise","resolve","all","errorsList"],"sourceRoot":""}